<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.12.1 on win32)" generated="20240619 13:37:47.577" rpa="false" schemaversion="3">
<suite id="s1" name="Tests" source="C:\SAP_Testing\SAPtesting\Tests">
<kw name="Setup highest level suite" type="SETUP">
<kw name="Set Variable" library="BuiltIn">
<var>${d.test_server}</var>
<arg>${test_server}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240619 13:37:48.220" level="INFO">${d.test_server} = Dev</msg>
<status status="PASS" starttime="20240619 13:37:48.219" endtime="20240619 13:37:48.220"/>
</kw>
<kw name="Reset screenshot count variable" library="Support">
<kw name="Set Variable" library="BuiltIn">
<var>${screenshotCount}</var>
<arg>${PABOTQUEUEINDEX}_1</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240619 13:37:48.221" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20240619 13:37:48.220" endtime="20240619 13:37:48.221"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshotCount}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240619 13:37:48.221" level="INFO">${screenshotCount} = 0_1</msg>
<status status="PASS" starttime="20240619 13:37:48.221" endtime="20240619 13:37:48.221"/>
</kw>
<kw name="Set up screenshot directory" library="Support">
<kw name="Create Directory" library="OperatingSystem">
<arg>${OUTPUTDIR}${/}${wvar('screenshot_dir')}</arg>
<doc>Creates the specified directory.</doc>
<msg timestamp="20240619 13:37:48.223" level="INFO">Web.Dev.screenshot_dir: Screenshot</msg>
<msg timestamp="20240619 13:37:48.228" level="INFO" html="true">Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot&lt;/a&gt;'.</msg>
<status status="PASS" starttime="20240619 13:37:48.222" endtime="20240619 13:37:48.228"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.221" endtime="20240619 13:37:48.228"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.220" endtime="20240619 13:37:48.229"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${screenshot_taking}</arg>
<arg>${True}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240619 13:37:48.229" level="INFO">${screenshot_taking} = True</msg>
<status status="PASS" starttime="20240619 13:37:48.229" endtime="20240619 13:37:48.229"/>
</kw>
<kw name="Setup linux execution" library="Support">
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${web_test_check}</var>
<arg>Variable Should Exist</arg>
<arg>${web_test}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${web_test}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<status status="PASS" starttime="20240619 13:37:48.230" endtime="20240619 13:37:48.231"/>
</kw>
<msg timestamp="20240619 13:37:48.231" level="INFO">${web_test_check} = True</msg>
<status status="PASS" starttime="20240619 13:37:48.230" endtime="20240619 13:37:48.231"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<arg>${web_test_check}</arg>
<arg>Setup Docker Execution Options</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Setup Docker Execution Options" library="Support_Web">
<kw name="Setup Suite Metadata" library="Support_Web">
<arg>${browser}</arg>
<kw name="Get Browser Metadata" library="BrowserSupport">
<var>&amp;{browser_information}</var>
<arg>browser=${browser}</arg>
<doc>Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}</doc>
<msg timestamp="20240619 13:37:53.109" level="INFO">&amp;{browser_information} = { browser_version=126.0.6478.62 | driver_version=126.0.6478.62  }</msg>
<status status="PASS" starttime="20240619 13:37:48.232" endtime="20240619 13:37:53.109"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_name</arg>
<arg>${browser}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240619 13:37:53.109" level="INFO">Set suite metadata 'test_browser_name' to value 'chrome'.</msg>
<status status="PASS" starttime="20240619 13:37:53.109" endtime="20240619 13:37:53.109"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_browser_version</arg>
<arg>${browser_information.browser_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240619 13:37:53.112" level="INFO">Set suite metadata 'test_browser_version' to value '126.0.6478.62'.</msg>
<status status="PASS" starttime="20240619 13:37:53.109" endtime="20240619 13:37:53.112"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>test_driver_version</arg>
<arg>${browser_information.driver_version}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240619 13:37:53.112" level="INFO">Set suite metadata 'test_driver_version' to value '126.0.6478.62 '.</msg>
<status status="PASS" starttime="20240619 13:37:53.112" endtime="20240619 13:37:53.112"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.232" endtime="20240619 13:37:53.112"/>
</kw>
<kw name="Setup Global Docker Execution Options" library="Support_Web">
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>None</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240619 13:37:53.112" level="INFO">${global_browser_options} = None</msg>
<status status="PASS" starttime="20240619 13:37:53.112" endtime="20240619 13:37:53.112"/>
</kw>
<kw name="Get Environment Variable" library="OperatingSystem">
<var>${docker_check}</var>
<arg>EXECUTION_ENVIRONMENT</arg>
<arg>not_found</arg>
<doc>Returns the value of an environment variable with the given name.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">${docker_check} = not_found</msg>
<status status="PASS" starttime="20240619 13:37:53.112" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<arg>"${docker_check}"!="docker"</arg>
<arg>Log</arg>
<arg>Not executing on Docker</arg>
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<kw name="Log" library="BuiltIn">
<arg>Not executing on Docker</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">Not executing on Docker</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<msg timestamp="20240619 13:37:53.116" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{options}</var>
<arg>--headless</arg>
<arg>--no-sandbox</arg>
<arg>--disable-dev-shm-usage</arg>
<doc>Returns a list containing given items.</doc>
<status status="NOT RUN" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>@{docker_options}</arg>
<arg>@{options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<status status="NOT RUN" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:53.112" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Create Webdriver for chrome preferences" library="Support_Web">
<kw name="Update Docker Execution Options" library="Support_Web">
<var>${list_prefs}</var>
<arg>${list_prefs}</arg>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<var>${docker_check}</var>
<arg>Variable Should Exist</arg>
<arg>${docker_options}</arg>
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<kw name="Variable Should Exist" library="BuiltIn">
<arg>${docker_options}</arg>
<doc>Fails unless the given variable exists within the current scope.</doc>
<msg timestamp="20240619 13:37:53.116" level="FAIL">Variable '${docker_options}' does not exist.</msg>
<status status="FAIL" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<msg timestamp="20240619 13:37:53.116" level="INFO">${docker_check} = False</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Get Length" library="BuiltIn">
<var>${list_prefs_length}</var>
<arg>${list_prefs}</arg>
<doc>Returns and logs the length of the given item as an integer.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">Length is 1</msg>
<msg timestamp="20240619 13:37:53.116" level="INFO">${list_prefs_length} = 1</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<var>${list_prefs}</var>
<arg>${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []</arg>
<arg>Combine Lists</arg>
<arg>${list_prefs}</arg>
<arg>${docker_options}</arg>
<arg>ELSE IF</arg>
<arg>${docker_check}</arg>
<arg>Set Variable</arg>
<arg>${docker_options}</arg>
<arg>ELSE</arg>
<arg>Set Variable</arg>
<arg>${list_prefs}</arg>
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<kw name="Set Variable" library="BuiltIn">
<arg>${list_prefs}</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<msg timestamp="20240619 13:37:53.116" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<msg timestamp="20240619 13:37:53.116" level="INFO">${list_prefs} = [[]]</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Create Chrome Options for download preferences" library="Support_Web">
<var>${chrome_options}</var>
<kw name="Evaluate" library="BuiltIn">
<var>${chrome_options}</var>
<arg>sys.modules['selenium.webdriver'].ChromeOptions()</arg>
<arg>sys</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000027DF6647140&gt;</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<msg timestamp="20240619 13:37:53.116" level="INFO">${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000027DF6647140&gt;</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Update Preferences List" library="Support_Web">
<arg>${chrome_options}</arg>
<arg>@{list_prefs}</arg>
<kw name="Convert To String" library="BuiltIn">
<var>${string_prefs}</var>
<arg>${list_prefs}</arg>
<doc>Converts the given item to a Unicode string.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">${string_prefs} = [[]]</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<arg>${string_prefs} == [[]]</arg>
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<for flavor="IN">
<var>${preference}</var>
<value>@{list_prefs}</value>
<iter>
<var name="${preference}"/>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_argument</arg>
<arg>${preference}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="NOT RUN" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<status status="NOT RUN" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</iter>
<status status="NOT RUN" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</for>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Call Method" library="BuiltIn">
<arg>${chrome_options}</arg>
<arg>add_experimental_option</arg>
<arg>prefs</arg>
<arg>${kw_prefs}</arg>
<doc>Calls the named method of the given object with the provided arguments.</doc>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<arg>${global_browser_options}</arg>
<arg>${chrome options}</arg>
<doc>Makes a variable available globally in all tests and suites.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x0000027DF6647140&gt;</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.232" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.231" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.230" endtime="20240619 13:37:53.116"/>
</kw>
<kw name="Set Suite Metadata" library="BuiltIn">
<arg>environment</arg>
<arg>${test_server}</arg>
<doc>Sets metadata for the current test suite.</doc>
<msg timestamp="20240619 13:37:53.116" level="INFO">Set suite metadata 'environment' to value 'Dev'.</msg>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.116"/>
</kw>
<status status="PASS" starttime="20240619 13:37:48.218" endtime="20240619 13:37:53.116"/>
</kw>
<suite id="s1-s1" name="Test Read CSV file" source="C:\SAP_Testing\SAPtesting\Tests\Test_Read_CSV_file.robot">
<test id="s1-s1-t1" name="Read and Write CSV with Pandas" line="6">
<kw name="Read CSV File" library="Read_CSV_file">
<doc>Read the content from the CSV file using Pandas.</doc>
<kw name="Read Csv File To Dataframe" library="PandasLibrary">
<var>${dataframe}</var>
<arg>${INPUT_FILE}</arg>
<msg timestamp="20240619 13:37:53.781" level="INFO">${dataframe} =       Name  Age   Department
0    Alice   30           HR
1      Bob   24  Engineering
2  Charlie   28        Sales</msg>
<status status="PASS" starttime="20240619 13:37:53.765" endtime="20240619 13:37:53.781"/>
</kw>
<kw name="Log Dataframe Info" library="PandasLibrary">
<arg>${dataframe}</arg>
<msg timestamp="20240619 13:37:53.781" level="INFO">&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 3 entries, 0 to 2
Data columns (total 3 columns):
 #   Column      Non-Null Count  Dtype 
---  ------      --------------  ----- 
 0   Name        3 non-null      object
 1   Age         3 non-null      int64 
 2   Department  3 non-null      object
dtypes: int64(1), object(2)
memory usage: 204.0+ bytes
None</msg>
<status status="PASS" starttime="20240619 13:37:53.781" endtime="20240619 13:37:53.781"/>
</kw>
<kw name="Dataframe To List" library="PandasLibrary">
<var>${data}</var>
<arg>${dataframe}</arg>
<msg timestamp="20240619 13:37:53.781" level="INFO">${data} = [['Alice', 30, 'HR'], ['Bob', 24, 'Engineering'], ['Charlie', 28, 'Sales']]</msg>
<status status="PASS" starttime="20240619 13:37:53.781" endtime="20240619 13:37:53.781"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${data}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20240619 13:37:53.781" level="INFO">[['Alice', 30, 'HR'], ['Bob', 24, 'Engineering'], ['Charlie', 28, 'Sales']]</msg>
<status status="PASS" starttime="20240619 13:37:53.781" endtime="20240619 13:37:53.781"/>
</kw>
<status status="PASS" starttime="20240619 13:37:53.765" endtime="20240619 13:37:53.781"/>
</kw>
<kw name="Write CSV File" library="Read_CSV_file">
<doc>Write content to a new CSV file using Pandas.</doc>
<kw name="Read Csv File To Dataframe" library="PandasLibrary">
<var>${dataframe}</var>
<arg>${INPUT_FILE}</arg>
<msg timestamp="20240619 13:37:53.796" level="INFO">${dataframe} =       Name  Age   Department
0    Alice   30           HR
1      Bob   24  Engineering
2  Charlie   28        Sales</msg>
<status status="PASS" starttime="20240619 13:37:53.781" endtime="20240619 13:37:53.796"/>
</kw>
<kw name="Add Column To Dataframe" library="PandasLibrary">
<var>${dataframe}</var>
<arg>${dataframe}</arg>
<arg>Salary</arg>
<arg>50000</arg>
<msg timestamp="20240619 13:37:53.796" level="INFO">${dataframe} =       Name  Age   Department Salary
0    Alice   30           HR  50000
1      Bob   24  Engineering  50000
2  Charlie   28        Sales  50000</msg>
<status status="PASS" starttime="20240619 13:37:53.796" endtime="20240619 13:37:53.796"/>
</kw>
<kw name="Write Dataframe To Csv" library="PandasLibrary">
<arg>${dataframe}</arg>
<arg>${OUTPUT_FILE}</arg>
<status status="PASS" starttime="20240619 13:37:53.796" endtime="20240619 13:37:53.796"/>
</kw>
<status status="PASS" starttime="20240619 13:37:53.781" endtime="20240619 13:37:53.796"/>
</kw>
<tag>CSVfile</tag>
<status status="PASS" starttime="20240619 13:37:53.765" endtime="20240619 13:37:53.796"/>
</test>
<status status="PASS" starttime="20240619 13:37:53.116" endtime="20240619 13:37:53.796"/>
</suite>
<doc>Testing functionality through Robot Framework</doc>
<meta name="environment">Dev</meta>
<meta name="test_browser_name">chrome</meta>
<meta name="test_browser_version">126.0.6478.62</meta>
<meta name="test_driver_version">126.0.6478.62 </meta>
<meta name="test_environment">Dev</meta>
<meta name="test_freeze_dependencies">astroid==3.1.0,attrs==23.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.2.2,cffi==1.16.0,chardet==5.2.0,charset-normalizer==3.3.2,click==8.1.7,colorama==0.4.6,cryptography==42.0.5,defusedxml==0.7.1,dill==0.3.8,docutils==0.20.1,docx==0.2.4,docx2pdf==0.1.8,et-xmlfile==1.1.0,exceptiongroup==1.2.0,fsspec==2024.5.0,gitdb==4.0.11,GitPython==3.1.42,h11==0.14.0,idna==3.6,isort==5.13.2,Jinja2==3.1.3,jira==3.6.0,jsonpath-ng==1.6.1,jsonschema==4.21.1,jsonschema-specifications==2023.12.1,lazy-object-proxy==1.10.0,lxml==5.1.0,markdown-it-py==3.0.0,MarkupSafe==2.1.5,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,numpy==1.26.4,oauthlib==3.2.2,openpyxl==3.1.2,outcome==1.3.0.post0,packaging==24.0,pandas==2.2.2,pathspec==0.11.2,pillow==10.2.0,pip==24.0,platformdirs==4.2.0,ply==3.11,pycparser==2.21,Pygments==2.17.2,pylint==3.1.0,PyPDF2==3.0.1,PySocks==1.7.1,python-dateutil==2.9.0.post0,python-docx==1.1.2,pytz==2024.1,pywin32==306,PyYAML==6.0.1,referencing==0.33.0,reportlab==4.2.0,requests==2.31.0,requests-oauthlib==1.4.0,requests-toolbelt==1.0.0,rich==13.7.1,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.18.0,selenium==4.9.1,setuptools==69.2.0,six==1.16.0,smmap==5.0.1,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.5,tomli==2.0.1,tomlkit==0.12.4,tqdm==4.66.4,trio==0.24.0,trio-websocket==0.11.1,typing_extensions==4.10.0,tzdata==2024.1,urllib3==2.2.1,wheel==0.43.0,wrapt==1.16.0,wsproto==1.2.0</meta>
<status status="PASS" starttime="20240619 13:37:47.893" endtime="20240619 13:37:54.237"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0" skip="0">CSVfile</stat>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Tests">Tests</stat>
<stat pass="1" fail="0" skip="0" id="s1-s1" name="Test Read CSV file">Tests.Test Read CSV file</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
