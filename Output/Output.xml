<?xml version="1.0" encoding="utf-8"?>
<robot generated="20240215 13:20:41.150" generator="Rebot 6.0.2 (Python 3.12.1 on win32)" rpa="false" schemaversion="3">
 <suite id="s1" name="Tests" source="C:\SAP_Testing\SAPtesting\Tests">
  <kw name="Setup highest level suite" type="SETUP">
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20240215 13:19:37.228">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20240215 13:19:37.228" starttime="20240215 13:19:37.228" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:37.229">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20240215 13:19:37.229" starttime="20240215 13:19:37.229" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:37.230">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20240215 13:19:37.230" starttime="20240215 13:19:37.230" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20240215 13:19:37.231">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20240215 13:19:37.233">
       Created directory '&lt;a href="file://C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot"&gt;C:\SAP_Testing\SAPtesting\Output\pabot_results\0\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20240215 13:19:37.233" starttime="20240215 13:19:37.230" status="PASS"/>
     </kw>
     <status endtime="20240215 13:19:37.233" starttime="20240215 13:19:37.230" status="PASS"/>
    </kw>
    <status endtime="20240215 13:19:37.233" starttime="20240215 13:19:37.229" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20240215 13:19:37.234">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20240215 13:19:37.234" starttime="20240215 13:19:37.233" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20240215 13:19:37.235" starttime="20240215 13:19:37.235" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20240215 13:19:37.235">
      ${web_test_check} = True
     </msg>
     <status endtime="20240215 13:19:37.235" starttime="20240215 13:19:37.234" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.564">
         &amp;{browser_information} = { browser_version=121.0.6167.161 | driver_version=121.0.6167.85  }
        </msg>
        <status endtime="20240215 13:19:40.564" starttime="20240215 13:19:37.236" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.565">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20240215 13:19:40.565" starttime="20240215 13:19:40.564" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.566">
         Set suite metadata 'test_browser_version' to value '121.0.6167.161'.
        </msg>
        <status endtime="20240215 13:19:40.566" starttime="20240215 13:19:40.565" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.568">
         Set suite metadata 'test_driver_version' to value '121.0.6167.85 '.
        </msg>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.567" status="PASS"/>
       </kw>
       <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:37.236" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.568">
         ${global_browser_options} = None
        </msg>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.568">
         ${docker_check} = not_found
        </msg>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20240215 13:19:40.568">
          Not executing on Docker
         </msg>
         <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240215 13:19:40.568">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="NOT RUN"/>
       </kw>
       <status endtime="20240215 13:19:40.568" starttime="20240215 13:19:40.568" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20240215 13:19:40.574">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          ${docker_check} = False
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.568" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240215 13:19:40.574">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.568" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000145A3DAD850&gt;
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20240215 13:19:40.574">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000145A3DAD850&gt;
        </msg>
        <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20240215 13:19:40.574">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="NOT RUN"/>
          </kw>
          <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="NOT RUN"/>
         </iter>
         <status endtime="20240215 13:19:40.574" starttime="20240215 13:19:40.574" status="NOT RUN"/>
        </for>
        <status endtime="20240215 13:19:40.582" starttime="20240215 13:19:40.574" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20240215 13:19:40.582" starttime="20240215 13:19:40.582" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20240215 13:19:40.583">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000145A3DAD850&gt;
        </msg>
        <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:40.583" status="PASS"/>
       </kw>
       <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:40.568" status="PASS"/>
      </kw>
      <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:37.236" status="PASS"/>
     </kw>
     <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:37.235" status="PASS"/>
    </kw>
    <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:37.234" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20240215 13:19:40.583">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:40.583" status="PASS"/>
   </kw>
   <status endtime="20240215 13:19:40.583" starttime="20240215 13:19:37.227" status="PASS"/>
  </kw>
  <suite id="s1-s1" name="Test Addon" source="C:\SAP_Testing\SAPtesting\Tests\Test_Addon.robot">
   <kw library="Common_Function" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:40.606">
      Sym.Dev.EXE_PAD: C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe
     </msg>
     <msg level="INFO" timestamp="20240215 13:19:40.606">
      Starting process:
"C:\Program Files (x86)\SAP\FrontEnd\SAPgui\saplogon.exe"
     </msg>
     <status endtime="20240215 13:19:40.606" starttime="20240215 13:19:40.606" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:45.606">
      Slept 5 seconds
     </msg>
     <status endtime="20240215 13:19:45.606" starttime="20240215 13:19:40.606" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20240215 13:19:45.613" starttime="20240215 13:19:45.606" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:50.613">
      Slept 5 seconds
     </msg>
     <status endtime="20240215 13:19:50.613" starttime="20240215 13:19:45.613" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:50.613">
      Sym.Dev.Connection_Name: RBT
     </msg>
     <status endtime="20240215 13:19:52.263" starttime="20240215 13:19:50.613" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:57.265">
      Slept 5 seconds
     </msg>
     <status endtime="20240215 13:19:57.265" starttime="20240215 13:19:52.264" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:57.265">
      Sym.Dev.SAP_CLIENT: 000
     </msg>
     <msg level="INFO" timestamp="20240215 13:19:57.270">
      Typing text '000' into text field 'wnd[0]/usr/txtRSYST-MANDT'.
     </msg>
     <status endtime="20240215 13:19:57.270" starttime="20240215 13:19:57.265" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:58.270">
      Slept 1 second
     </msg>
     <status endtime="20240215 13:19:58.270" starttime="20240215 13:19:57.270" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:58.270">
      Sym.Dev.SAP_USER: DDIC
     </msg>
     <msg level="INFO" timestamp="20240215 13:19:58.287">
      Typing text 'DDIC' into text field 'wnd[0]/usr/txtRSYST-BNAME'.
     </msg>
     <status endtime="20240215 13:19:58.287" starttime="20240215 13:19:58.270" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:59.287">
      Slept 1 second
     </msg>
     <status endtime="20240215 13:19:59.287" starttime="20240215 13:19:58.287" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${symvar('SAP_PASSWORD')}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <msg level="INFO" timestamp="20240215 13:19:59.287">
      Sym.Dev.SAP_PASSWORD: Sym@rocks2023
     </msg>
     <msg level="INFO" timestamp="20240215 13:19:59.289">
      Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.
     </msg>
     <status endtime="20240215 13:19:59.289" starttime="20240215 13:19:59.287" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:20:01.289">
      Slept 2 seconds
     </msg>
     <status endtime="20240215 13:20:01.289" starttime="20240215 13:19:59.289" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20240215 13:20:01.599" starttime="20240215 13:20:01.289" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:20:06.599">
      Slept 5 seconds
     </msg>
     <status endtime="20240215 13:20:06.599" starttime="20240215 13:20:01.599" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <msg level="INFO" timestamp="20240215 13:20:06.966">
      Multiple logon exists
     </msg>
     <status endtime="20240215 13:20:06.966" starttime="20240215 13:20:06.599" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:20:07.966">
      Slept 1 second
     </msg>
     <status endtime="20240215 13:20:07.966" starttime="20240215 13:20:06.966" status="PASS"/>
    </kw>
    <status endtime="20240215 13:20:07.966" starttime="20240215 13:19:40.606" status="PASS"/>
   </kw>
   <test id="s1-s1-t1" line="10" name="Check_Saint Transation Code">
    <kw library="Addon" name="Saint Transation Code">
     <kw library="CustomSapGuiLibrary" name="Run Transaction">
      <arg>
       Saint
      </arg>
      <doc>
       Runs a Sap transaction. An error is given when an unknown transaction is specified.
      </doc>
      <status endtime="20240215 13:20:08.168" starttime="20240215 13:20:07.967" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:10.182">
       Slept 2 seconds
      </msg>
      <status endtime="20240215 13:20:10.182" starttime="20240215 13:20:08.182" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       saintfrontpage.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20240215 13:20:10.255">
       &lt;a href="pabot_results%5C0%5Csaintfrontpage.jpg"&gt;&lt;img src="pabot_results%5C0%5Csaintfrontpage.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20240215 13:20:10.255" starttime="20240215 13:20:10.182" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:11.262">
       Slept 1 second
      </msg>
      <status endtime="20240215 13:20:11.262" starttime="20240215 13:20:10.261" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Get Maintenance Certificate Text">
      <arg>
       ${certificate_id}
      </arg>
      <msg level="INFO" timestamp="20240215 13:20:11.262">
       License available to proceed further
      </msg>
      <status endtime="20240215 13:20:11.262" starttime="20240215 13:20:11.262" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       certificate.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20240215 13:20:11.320">
       &lt;a href="pabot_results%5C0%5Ccertificate.jpg"&gt;&lt;img src="pabot_results%5C0%5Ccertificate.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20240215 13:20:11.320" starttime="20240215 13:20:11.262" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       5
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:16.320">
       Slept 5 seconds
      </msg>
      <status endtime="20240215 13:20:16.320" starttime="20240215 13:20:11.320" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/mbar/menu[0]/menu[0]/menu[1]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20240215 13:20:16.587" starttime="20240215 13:20:16.320" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       3
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:19.587">
       Slept 3 seconds
      </msg>
      <status endtime="20240215 13:20:19.587" starttime="20240215 13:20:16.587" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/usr/btnBUTTON_1
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20240215 13:20:19.930" starttime="20240215 13:20:19.587" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       3
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:22.941">
       Slept 3 seconds
      </msg>
      <status endtime="20240215 13:20:22.941" starttime="20240215 13:20:19.941" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/tbar[0]/btn[3]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20240215 13:20:23.125" starttime="20240215 13:20:22.941" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       10
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:33.126">
       Slept 10 seconds
      </msg>
      <status endtime="20240215 13:20:33.126" starttime="20240215 13:20:23.125" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       Saint1.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20240215 13:20:33.167">
       &lt;a href="pabot_results%5C0%5CSaint1.jpg"&gt;&lt;img src="pabot_results%5C0%5CSaint1.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20240215 13:20:33.167" starttime="20240215 13:20:33.126" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/usr/btnBUTTON_NEXT
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20240215 13:20:33.281" starttime="20240215 13:20:33.167" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20240215 13:20:35.282">
       Slept 2 seconds
      </msg>
      <status endtime="20240215 13:20:35.282" starttime="20240215 13:20:33.281" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       saint2.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20240215 13:20:35.332">
       &lt;a href="pabot_results%5C0%5Csaint2.jpg"&gt;&lt;img src="pabot_results%5C0%5Csaint2.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.282" status="PASS"/>
     </kw>
     <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:07.967" status="PASS"/>
    </kw>
    <kw library="Addon" name="Get Cell Text From SAP Table">
     <kw library="BuiltIn" name="Log">
      <arg>
       ${addon}
      </arg>
      <doc>
       Logs the given message with the given level.
      </doc>
      <msg level="FAIL" timestamp="20240215 13:20:35.332">
       Variable '${addon}' not found.
      </msg>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="FAIL"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Find Addon Rows">
      <var>
       ${foundRow}
      </var>
      <arg>
       wnd[0]/usr/subLIST_AREA:SAPLSAINT_UI:0104/tblSAPLSAINT_UIADDON_TO_INSTALL
      </arg>
      <arg>
       ${addon}
      </arg>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Log">
      <arg>
       Found text in row: ${foundRow}
      </arg>
      <doc>
       Logs the given message with the given level.
      </doc>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Select Table Row">
      <arg>
       wnd[0]/usr/subLIST_AREA:SAPLSAINT_UI:0104/tblSAPLSAINT_UIADDON_TO_INSTALL
      </arg>
      <arg>
       ${foundRow}
      </arg>
      <doc>
       Selects an entire row of a table. This can either be a TableControl or a GridView 'table_id'
which is contained within a shell object. The row is an index to select the row, starting from 0.
      </doc>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       saint4.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/usr/btnBUTTON_NEXT
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       4
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="NOT RUN"/>
     </kw>
     <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:35.332" status="FAIL"/>
    </kw>
    <tag>
     RBTLOGIN
    </tag>
    <tag>
     Regression
    </tag>
    <status endtime="20240215 13:20:35.332" starttime="20240215 13:20:07.966" status="FAIL">
     Variable '${addon}' not found.
    </status>
   </test>
   <kw library="Common_Function" name="System Logout" type="TEARDOWN">
    <kw library="CustomSapGuiLibrary" name="Run Transaction">
     <arg>
      /nex
     </arg>
     <doc>
      Runs a Sap transaction. An error is given when an unknown transaction is specified.
     </doc>
     <status endtime="20240215 13:20:35.374" starttime="20240215 13:20:35.332" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20240215 13:20:40.375">
      Slept 5 seconds
     </msg>
     <status endtime="20240215 13:20:40.375" starttime="20240215 13:20:35.374" status="PASS"/>
    </kw>
    <status endtime="20240215 13:20:40.375" starttime="20240215 13:20:35.332" status="PASS"/>
   </kw>
   <status endtime="20240215 13:20:40.375" starttime="20240215 13:19:40.583" status="FAIL"/>
  </suite>
  <doc>
   Testing functionality through Robot Framework
  </doc>
  <meta name="environment">
   Dev
  </meta>
  <meta name="test_browser_name">
   chrome
  </meta>
  <meta name="test_browser_version">
   121.0.6167.161
  </meta>
  <meta name="test_driver_version">
   121.0.6167.85
  </meta>
  <meta name="test_environment">
   Dev
  </meta>
  <meta name="test_freeze_dependencies">
   astroid==3.0.3,attrs==23.2.0,beautifulsoup4==4.12.3,bs4==0.0.2,certifi==2024.2.2,cffi==1.16.0,chardet==5.2.0,charset-normalizer==3.3.2,click==8.1.7,colorama==0.4.6,cryptography==42.0.2,defusedxml==0.7.1,dill==0.3.8,docutils==0.20.1,exceptiongroup==1.2.0,gitdb==4.0.11,GitPython==3.1.41,h11==0.14.0,idna==3.6,isort==5.13.2,Jinja2==3.1.3,jira==3.6.0,jsonpath-ng==1.6.1,jsonschema==4.21.1,jsonschema-specifications==2023.12.1,lazy-object-proxy==1.10.0,lxml==5.1.0,markdown-it-py==3.0.0,MarkupSafe==2.1.5,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,oauthlib==3.2.2,outcome==1.3.0.post0,packaging==23.2,pathspec==0.11.2,pillow==10.2.0,pip==24.0,platformdirs==4.2.0,ply==3.11,pycparser==2.21,Pygments==2.17.2,pylint==3.0.3,PySocks==1.7.1,pywin32==306,PyYAML==6.0.1,referencing==0.33.0,reportlab==4.1.0,requests==2.31.0,requests-oauthlib==1.3.1,requests-toolbelt==1.0.0,rich==13.7.0,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.17.1,selenium==4.9.1,setuptools==69.0.3,smmap==5.0.1,sniffio==1.3.0,sortedcontainers==2.4.0,soupsieve==2.5,tomli==2.0.1,tomlkit==0.12.3,trio==0.24.0,trio-websocket==0.11.1,typing_extensions==4.9.0,urllib3==2.2.0,wheel==0.42.0,wrapt==1.16.0,wsproto==1.2.0
  </meta>
  <status endtime="20240215 13:20:40.780" starttime="20240215 13:19:36.870" status="FAIL"/>
 </suite>
 <statistics>
  <total>
   <stat fail="1" pass="0" skip="0">
    All Tests
   </stat>
  </total>
  <tag>
   <stat fail="1" pass="0" skip="0">
    RBTLOGIN
   </stat>
   <stat fail="1" pass="0" skip="0">
    Regression
   </stat>
  </tag>
  <suite>
   <stat fail="1" id="s1" name="Tests" pass="0" skip="0">
    Tests
   </stat>
   <stat fail="1" id="s1-s1" name="Test Addon" pass="0" skip="0">
    Tests.Test Addon
   </stat>
  </suite>
 </statistics>
 <errors>
  <msg level="ERROR" timestamp="20240215 13:19:40.606">
   Error in file 'C:\SAP_Testing\SAPtesting\Tests\Resource\Addon.robot' on line 24: Setting variable '${addon}' failed: Resolving variable '${symvar('addOn').split(',')}' failed: AttributeError: 'list' object has no attribute 'split'
  </msg>
 </errors>
</robot>
